# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['app.py'],
    pathex=['d:\\国智项目\\bci_proj-master\\mi_app'],
    binaries=[],
    datas=[
        ('d:\\国智项目\\bci_proj-master\\mi_app\\mainwindow.ui', '.'),
        ('d:\\国智项目\\bci_proj-master\\mi_app\\curveformAlp.ui', '.'),
        ('d:\\国智项目\\bci_proj-master\\mi_app\\curvesform.ui', '.'),
        ('d:\\国智项目\\bci_proj-master\\mi_app\\trainingdataselector.ui', '.'),
        ('*.ini', '.'),
        ('*.json', '.'),
        ('*.qss', '.'),
        ('sounds', 'sounds'),
        ('images', 'images'),
        ('training_data', 'training_data'),
        ('training_data_curctrl', 'training_data_curctrl'),
        ('models', 'models'),
        ('data', 'data')
    ],
    hiddenimports=[
        'PyQt5.QtSerialPort',
        'PyQt5.QtCore',
        'PyQt5.QtGui',
        'PyQt5.QtWidgets',
        'PyQt5.sip',
        'pylsl',
        'psychopy',
        'psychopy.visual',
        'psychopy.core',
        'psychopy.sound',
        'mne',
        'mne.io',
        'mne.io.edf',
        'mne.io.brainvision',
        'mne.io.fiff',
        'mne.preprocessing',
        'mne.filter',
        'mne.epochs',
        'mne.evoked',
        'mne.time_frequency',
        'mne.decoding',
        'mne.stats',
        'mne.viz',
        'mne.channels',
        'mne.datasets',
        'mne.simulation',
        'mne.minimum_norm',
        'mne.inverse_sparse',
        'mne.beamformer',
        'mne.connectivity',
        'mne.realtime',
        'mne.export',
        'mne.report',
        'mne.utils',
        'mne._fiff',
        'mne.bem',
        'mne.surface',
        'mne.source_space',
        'mne.forward',
        'mne.cov',
        'sklearn',
        'sklearn.svm',
        'sklearn.pipeline',
        'sklearn.preprocessing',
        'pyedflib',
        'scipy.signal',
        'scipy.io',
        'matplotlib.backends.backend_qt5agg',
        'numpy.core._methods',
        'numpy.lib.format',
        'pkg_resources.py2_warn',
        'lazy_loader'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='BCI_EEG_App',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
   # icon='images/icon.ico'  # 如果有图标文件
)